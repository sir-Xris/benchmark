#!/bin/bash
trap 'exit 0' INT

alias echo='/bin/echo'

# beautify output
readonly WARN="\033[1;33m"
readonly ERROR="\033[1;31m"
readonly BOLD="\033[1m"
readonly NORMAL="\033[0;0m"

SRCFILE=${1:-src.cc}
SRCOUT=${SRCFILE%.*}
STDFILE=${2:-std.cc}
STDOUT=${STDFILE%.*}

# Not support executor like java or python
# So set shebang in source file, please
compile () {
    case ${1##*.} in
    c)
        cc -Wall -O2 -o bin/${1%.*} $1 $CFLAGS
    ;;
    cc | cpp | cxx)
        c++ -Wall -O2 -o bin/${1%.*} $1 $CPPFLAGS
    ;;
    go)
        go build $1 && mv ${1%.*} bin/${1%.*}
    ;;
    py | rb)
        install --mode=777 $1 ${1%.*}
    ;;
    esac
}

# To test src and std
run () {
    echo -n "Running $1... "
    INFO=$(env time --format='%E %M' 2>&1 bin/$1 < log/input > log/$1)
    if [[ $? != 0 ]]; then
        echo -e "${ERROR}segmentation fault${NORMAL}"
        exit $?
    fi
    read TIME MEMORY <<< $INFO

    # Convert Memory(KB) to Memory(MB)
    MEMORY=$(bc <<< "scale=2;$MEMORY/1024")
    echo -e "${BOLD}${TIME}${NORMAL}sec ${BOLD}${MEMORY}${NORMAL}MB"
}

# Compile, if you want to change language, edit following lines
#g++ -O3 -Wall -o bin/mk mk.cc
compile mk.cc
[[ $? == 0 ]] || exit $?
#g++ -O2 -Wall -o bin/$STDOUT $STDFILE
compile $STDFILE
[[ $? == 0 ]] || exit $?
#g++ -O2 -Wall -o bin/$SRCOUT $SRCFILE
compile $SRCFILE
[[ $? == 0 ]] || exit $?

# Program will not stop unless received an ERR or INT
echo -e "${WARN}Warning: Press Ctrl+C to interrupt me.${NORMAL}"
sleep 1

while [[ $? -eq 0 ]]; do
    echo
    echo 'Producing data...'
    bin/mk > log/input
    run $STDOUT
    run $SRCOUT
    diff --brief log/$STDOUT log/$SRCOUT
    [[ $? == 0 ]] || exit $?
done
